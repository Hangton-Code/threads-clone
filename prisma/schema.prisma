// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @unique
  user_name           String       @unique @default(uuid())
  display_name        String       @default(uuid())
  avatar_type         Avatar       @default(Default)
  avatar_value        String?
  isProfileCustomized Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  bio                 String       @default("")
  following           Friendship[] @relation("Following")
  follower            Friendship[] @relation("Follower")
  isPrivateAccount    Boolean      @default(false)
  Thread              Thread[]
  Like                Like[]
}

// avatar type
enum Avatar {
  File
  Url
  Default
}

model Friendship {
  id                          String   @id @unique @default(uuid())
  user_to_be_followed         User     @relation("Follower", fields: [user_to_be_followed_id], references: [id], onDelete: Cascade)
  user_to_be_followed_id      String
  user_requested_to_follow    User     @relation("Following", fields: [user_requested_to_follow_id], references: [id], onDelete: Cascade)
  user_requested_to_follow_id String
  createdAt                   DateTime @default(now())
  activity_read               Boolean  @default(false)

  @@unique([user_requested_to_follow_id, user_to_be_followed_id])
}

model Thread {
  id             String   @id @unique @default(uuid())
  author         User     @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id      String
  replied_by     Thread[] @relation("Replies")
  reply_to       Thread?  @relation("Replies", fields: [reply_to_id], references: [id], onDelete: Cascade)
  reply_to_id    String?
  attachment     String?
  content        String
  createdAt      DateTime @default(now())
  Like           Like[]
  repost_from    Thread?  @relation("Reposts", fields: [repost_from_id], references: [id], onDelete: Cascade)
  reposts        Thread[] @relation("Reposts")
  repost_from_id String?

  @@unique([repost_from_id, author_id])
}

model Like {
  id        String @id @unique @default(uuid())
  thread    Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  thread_id String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String

  @@unique([thread_id, user_id])
}
